-- language_tour.ln
module examples.tour;

var foo: String = "foo";   -- mutable binding
val bar: String = "bar";   -- immutable binding
foo = "foo!";              -- allowed (foo is mut)


--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- Functions
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-- Simple expression‑bodied function
def add(x: Int, y: Int): Int = x + y;

-- Function that mutates one of its parameters
def add_mut(x: mut Int, y: Int): Unit = {
    x = x + y;
}

-- Using a mutable argument at the call‑site
var x: Int = 14;
add_mut(mut x, 2);

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- Documentation Blocks (Typst‑enabled)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--*
Given $x, y in ZZ$, returns

$ x + e^(x/y) $
*--
def equation_thing(x: Int, y: Int): Float =
    x + exp(y * 1 / x);


-- Later, we will have support for currying!!
def pow(y: Int)(x: Int) = x^y

def square(x: Int): Int = pow(2)

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- Records & Structs
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
struct Person {
    name : String;
    age  : Int;
};

def print_name(p: Person): Unit = println(p.name)

val me: Person = Person { name = "Angel"; age = 21; };
print_name(me)

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- Sum Types (Enums)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

enum Option[A] {
    None,
    Some(value: A)
};

-- map for Option
def option_map[A, B](opt: Option[A], f: A -> B): Option[B] =
    match opt {
        None      => None;
        Some(v)   => Some(f(v));
    };

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- List Utilities (imported from std.list) – quick demo
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import std.list (map, length, filter);

val nums: List[Int] = cons(1, cons(2, cons(3, Nil)));

println(length(nums));              -- 3
println(nums |> map(n => n * 2));   -- [2, 4, 6]
