-- Variables and Values
foo : mut String = "foo";
bar : Srting = "bar";

-- We are able to mutate foo, but not bar
foo = "foo!";


-- Functions
add : Int, Int -> Int = x, y => x + y;

-- Functions can take in a mutable input 
add_mut : mut Int, Int -> () = x, y => {
	x = (x + y);
}

-- When passing a variable into a function, we will specify that we
-- are okay with allowing its mutation
x : mut Int = 14;
add_mut(mut x, 2);

--*
= Longer Comments

You can also make larger comment blocks, such as this one.

These comment blocks allow for typst syntax! This syntax can
be used to generate docs, by the use of docstring like rusts.
*--

-- The following comment will be part of the documentation
-- as it comes right before the function (maybe different syntax
-- would be better here)

--*
Given $x, y in ZZ$, return

$
	x + e^(y times 1/x)
$

Becuase of the brackets, you can Curry this function!
*--
def equation_thing (x : Int) (y : Int) : Float =
	x + math.exp(y * 1/x)

-- Making structures
struct Person
	{ name   : String
	, age    : Int
	}


def print_name (p : Person) : () = 
	println(person.name)

me : mut Person = Person
	( name = "Angel"
	, age  = 21
	)

-- This is similar to method syntax
me |> print_name

